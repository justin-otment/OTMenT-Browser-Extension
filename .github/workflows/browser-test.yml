name: Browser tests (non-headless)

on: [push, pull_request]

permissions:
  contents: read
  actions: write

jobs:
  browser:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            xvfb libgtk-3-0 libxss1 libasound2t64 fonts-liberation \
            libgbm-dev libnss3-dev libu2f-udev xdg-utils openvpn \
            iproute2 iputils-ping curl python3 python3-pip jq

      - name: Setup Chrome (Chromium)
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest
          install-dependencies: true
          install-chromedriver: false

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      - name: Install npm packages (robust)
        env:
          CI: true
        run: |
          set -euo pipefail
          echo "Attempting npm ci (deterministic)..."
          if npm ci --ignore-scripts --no-audit --no-fund; then
            echo "‚úÖ npm ci succeeded"
          else
            echo "‚ö† npm ci failed ‚Äî falling back to npm install --legacy-peer-deps"
            npm install --legacy-peer-deps --no-audit --no-fund
            echo "‚Ñπ Reminder: run 'npm install' locally and commit updated package-lock.json to make CI deterministic"
          fi

      - name: Locate Chrome binary
        id: chrome-bin
        run: |
          CHROME_BIN=$(which google-chrome || which chromium || true)
          if [ -z "$CHROME_BIN" ]; then
            CHROME_BIN=$(find /opt/hostedtoolcache/setup-chrome -type f -name chrome | head -n1)
          fi
          if [ -z "$CHROME_BIN" ]; then
            echo "‚ùå Chrome binary not found."; exit 1
          fi
          echo "‚úÖ Using Chrome binary: $CHROME_BIN"
          echo "CHROME_BIN=$CHROME_BIN" >> $GITHUB_ENV
          "$CHROME_BIN" --version

      - name: Ensure chromedriver (diagnostic)
        run: |
          ls -la node_modules/.bin || true
          node -e "console.log(require('chromedriver')?.path || 'chromedriver not found')" || true

      - name: Prepare artifacts directories
        run: mkdir -p artifacts/{screenshots,diagnostics,videos}

      - name: Verify or create test page
        run: |
          if [ ! -f "otment-test.html" ]; then
            echo "‚ö†Ô∏è otment-test.html missing, creating fallback..."
            cat <<'EOF' > otment-test.html
<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8"><title>OTMenT Test Page</title></head>
<body>
  <div id="otment-status">Initializing...</div>
  <script>
    setTimeout(()=>{document.getElementById('otment-status').classList.add('active');},1500);
  </script>
</body>
</html>
EOF
          fi
          echo "‚úÖ otment-test.html ready."

      - name: Start OpenVPN (rotate configs)
        env:
          CI: true
        run: |
          set -euo pipefail
          VPN_DIR="VPN"
          AUTH_FILE="$VPN_DIR/auth.txt"
          STATE_FILE="$VPN_DIR/rotation_state.txt"
          PIDFILE="/tmp/openvpn.pid"
          LOGFILE="/tmp/openvpn.log"

          mapfile -t OVPN_LIST < <(find "$VPN_DIR" -maxdepth 1 -type f -name "*.ovpn" | sort)
          if [ ${#OVPN_LIST[@]} -eq 0 ]; then
            echo "‚ùå No .ovpn found in $VPN_DIR"; exit 1
          fi
          [ -f "$AUTH_FILE" ] || { echo "‚ùå Missing $AUTH_FILE"; exit 1; }

          if [ -f "$STATE_FILE" ]; then
            LAST=$(cat "$STATE_FILE" || true)
            IDX=$(printf '%s\n' "${OVPN_LIST[@]}" | grep -nFx "$LAST" | cut -d: -f1 || echo 0)
            NEXT_INDEX=$(( (IDX) % ${#OVPN_LIST[@]} ))
            NEXT="${OVPN_LIST[$NEXT_INDEX]}"
          else
            NEXT="${OVPN_LIST[0]}"
          fi

          echo "$NEXT" > "$STATE_FILE"
          echo "üß≠ Using VPN config: $NEXT"

          BASE_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "üåê Base IP: $BASE_IP"

          echo "üöÄ Starting OpenVPN..."
          if grep -q "auth-user-pass" "$NEXT"; then
            sudo nohup openvpn --config "$NEXT" --auth-user-pass "$AUTH_FILE" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          else
            sudo nohup openvpn --config "$NEXT" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          fi

          sleep 3
          [ -f "$PIDFILE" ] || { echo "‚ùå OpenVPN failed to start"; tail -n 50 "$LOGFILE"; exit 1; }

          echo "‚è≥ Waiting for tun0..."
          for i in $(seq 1 60); do
            ip a show tun0 &>/dev/null && break
            sleep 1
          done
          ip a show tun0 &>/dev/null || { echo "‚ùå VPN interface not found"; tail -n 100 "$LOGFILE"; exit 1; }

          VPN_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "VPN IP: $VPN_IP"
          [ "$VPN_IP" != "$BASE_IP" ] && [ "$VPN_IP" != "unknown" ] || {
            echo "‚ùå VPN connection failed"; tail -n 100 "$LOGFILE"; exit 1;
          }

      - name: Start local test server
        run: |
          npm install -g http-server@14
          nohup npx http-server -p 8080 -c-1 . > /tmp/http-server.log 2>&1 &
          for i in $(seq 1 10); do
            curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1 && break
            sleep 1
          done
          curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null || {
            echo "‚ùå Test page not reachable"; cat /tmp/http-server.log; exit 1;
          }

      - name: Prepare extension in runner (inject key from secret)
        env:
          OTMENT_EXT_KEY_BASE64: ${{ secrets.OTMENT_EXT_KEY_BASE64 }}
        run: |
          set -euo pipefail
          TMP_EXT="/tmp/otment-extension"
          rm -rf "$TMP_EXT"
          mkdir -p "$TMP_EXT"
          cp -r "${GITHUB_WORKSPACE}/." "$TMP_EXT/"

          if [ -n "${OTMENT_EXT_KEY_BASE64:-}" ]; then
            python3 - <<'PY'
import json, os, sys
p = "/tmp/otment-extension/manifest.json"
b = os.environ.get("OTMENT_EXT_KEY_BASE64")
try:
    m = json.load(open(p))
except Exception as e:
    print("ERROR: failed to read manifest.json:", e)
    sys.exit(1)
if "key" not in m:
    m2 = {"manifest_version": m.get("manifest_version", 3), "key": b}
    for k, v in m.items():
        if k != "manifest_version":
            m2[k] = v
    open(p, "w").write(json.dumps(m2, indent=2))
else:
    print("manifest already has key")
PY
          else
            echo "No OTMENT_EXT_KEY_BASE64 provided"
          fi

          sudo chmod -R 755 "$TMP_EXT" || true
          echo "EXTENSION_PATH=${TMP_EXT}" >> $GITHUB_ENV
          echo "CHROME_ARGS=--disable-extensions-except=${TMP_EXT} --load-extension=${TMP_EXT} --no-sandbox --disable-dev-shm-usage --window-size=1920,1080" >> $GITHUB_ENV

      - name: Debug injected extension contents
        run: |
          echo "EXTENSION_PATH=$EXTENSION_PATH"
          echo "CHROME_ARGS=$CHROME_ARGS"
          echo "Listing extension files:"
          ls -la "$EXTENSION_PATH" || true
          echo "--- manifest.json ---"
          jq . "$EXTENSION_PATH/manifest.json" || cat "$EXTENSION_PATH/manifest.json" || true
          echo "--- key field (single line) ---"
          jq -r '.key // "NO_KEY"' "$EXTENSION_PATH/manifest.json" || true
          echo "--- check main scripts ---"
          for f in background.js background.mjs service_worker.js service-worker.js; do
            [ -f "$EXTENSION_PATH/$f" ] && echo "FOUND: $f" && head -n 40 "$EXTENSION_PATH/$f"
          done
          echo "--- ensure readable ---"
          sudo chmod -R 755 "$EXTENSION_PATH" || true

      - name: Export Chrome args (legacy fallback)
        run: |
          echo "TEST_PAGE_URL=https://www.fastpeoplesearch.com/address/123-main-st_98001" >> $GITHUB_ENV

      - name: Run headed tests under Xvfb (with debug + Chrome path export)
        env:
          CI: true
          TEST_PAGE_URL: ${{ env.TEST_PAGE_URL }}
          CHROME_ARGS: ${{ env.CHROME_ARGS }}
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "1"
          DEBUG: puppeteer:*
        run: |
          set -euo pipefail
          CHROME_PATH="${{ env.CHROME_BIN }}"
          if [ -z "$CHROME_PATH" ]; then
            CHROME_PATH=$(which google-chrome || which chromium || find /opt/hostedtoolcache/setup-chrome -type f -name chrome | head -n1)
          fi
          echo "Using CHROME_PATH: $CHROME_PATH"
