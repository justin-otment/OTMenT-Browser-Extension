name: Browser tests (non-headless)

on: [push, pull_request]

permissions:
  contents: read
  actions: write

jobs:
  browser:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install APT deps and enable universe
        run: |
          sudo apt-get update -y
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libgtk-3-0 \
            libxss1 \
            libasound2t64 \
            fonts-liberation \
            libgbm-dev \
            libnss3-dev \
            libu2f-udev \
            xdg-utils \
            openvpn \
            iproute2 \
            iputils-ping \
            curl

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest
          install-dependencies: true

      - name: Install npm packages
        run: npm ci

      - name: Ensure Puppeteer is installed
        run: |
          npm install puppeteer@23 --save-dev

      - name: Create artifact folders
        run: |
          mkdir -p artifacts/screenshots
          mkdir -p artifacts/diagnostics
          mkdir -p artifacts/videos || true

      - name: Ensure test page exists
        run: |
          if [ ! -f "otment-test.html" ]; then
            echo "‚ö†Ô∏è  otment-test.html missing ‚Äî creating minimal fallback page..."
            cat <<'EOF' > otment-test.html
          <!DOCTYPE html>
          <html lang="en">
          <head><meta charset="UTF-8"><title>OTMenT Test Page</title></head>
          <body>
            <div id="otment-status">Initializing...</div>
            <script>
              setTimeout(()=>{document.getElementById('otment-status').classList.add('active');},1500);
            </script>
          </body>
          </html>
          EOF
          fi
          echo "‚úÖ Verified otment-test.html present."

      - name: Start local static server
        run: |
          npm install -g http-server@14 || true
          nohup npx http-server -p 8080 -c-1 . > /tmp/http-server.log 2>&1 &
          echo "Started http-server; waiting..."
          for i in $(seq 1 10); do
            if curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1; then
              echo "‚úÖ Test page reachable."
              break
            fi
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1; then
            echo "‚ùå Local test page not reachable."
            cat /tmp/http-server.log || true
            exit 1
          fi

      - name: Run orchestrator (VPN + Chrome automation)
        env:
          CI: true
        run: |
          echo "üöÄ Starting orchestrator..."
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" node scripts/orchestrator.js
        timeout-minutes: 30
        continue-on-error: false

      - name: Verify artifacts produced
        if: always()
        run: |
          echo "Listing artifacts:"
          ls -la artifacts || true
          echo "Checking screenshots..."
          if [ ! "$(ls -A artifacts/screenshots 2>/dev/null)" ]; then
            echo "‚ùå No screenshots generated ‚Äî automation may have failed."
            mkdir -p artifacts/diagnostics
            [ -f /tmp/openvpn.log ] && cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true
            exit 1
          fi
          echo "‚úÖ Artifacts verified."

      - name: Collect diagnostics and logs
        if: always()
        run: |
          google-chrome --version || chromium --version || true
          echo "Artifacts dir:"
          ls -la artifacts || true
          echo "Screenshots:"
          ls -la artifacts/screenshots || true
          if [ -f /tmp/openvpn.log ]; then
            tail -n 200 /tmp/openvpn.log || true
            cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true
          fi
          echo "VPN state:"
          cat VPN/.vpn_state.json || echo "No state file."

      - name: Disconnect VPN (cleanup)
        if: always()
        run: |
          sudo pkill -f openvpn || true
          echo "‚úÖ VPN disconnected."

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browser-artifacts
          path: |
            artifacts/diagnostics/**
            artifacts/screenshots/**
            artifacts/videos/**
