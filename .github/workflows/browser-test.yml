name: Browser tests (non-headless)

on: [push, pull_request]

permissions:
  contents: read
  actions: write

jobs:
  browser:
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout
        uses: actions/checkout@v4

      - name: 🧱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🧰 Install APT deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            xvfb libgtk-3-0 libxss1 libasound2t64 fonts-liberation \
            libgbm-dev libnss3-dev libu2f-udev xdg-utils \
            openvpn iproute2 iputils-ping curl gconf-service

      - name: 🌐 Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest
          install-dependencies: true

      - name: 📦 Install npm packages
        run: npm ci

      - name: 🧩 Ensure Puppeteer installed
        run: npm install puppeteer@23 --save-dev

      - name: 🗂️ Prepare artifacts
        run: mkdir -p artifacts/{screenshots,diagnostics,videos}

      - name: 🧾 Ensure test page exists
        run: |
          if [ ! -f "otment-test.html" ]; then
            cat <<'EOF' > otment-test.html
          <!DOCTYPE html>
          <html lang="en">
          <head><meta charset="UTF-8"><title>OTMenT Test Page</title></head>
          <body>
            <h3>OTMenT Test Environment</h3>
            <iframe id="test-frame" srcdoc="<input id='target-input' placeholder='Type here...' />" width="600" height="400"></iframe>
          </body>
          </html>
          EOF
          fi

      - name: 🔁 Rotate and connect VPN
        run: |
          set -euo pipefail
          VPN_DIR="VPN"
          AUTH_FILE="$VPN_DIR/auth.txt"
          PIDFILE="/tmp/openvpn.pid"
          LOGFILE="/tmp/openvpn.log"
          STATE_FILE="$VPN_DIR/rotation_state.txt"
          mapfile -t OVPN_LIST < <(find "$VPN_DIR" -maxdepth 1 -type f -name "*.ovpn" | sort)
          [ "${#OVPN_LIST[@]}" -eq 0 ] && { echo "❌ No VPN configs found"; exit 1; }
          NEXT="${OVPN_LIST[0]}"
          echo "$NEXT" > "$STATE_FILE"
          echo "🌐 Connecting using: $NEXT"
          sudo nohup openvpn --config "$NEXT" --daemon --writepid "$PIDFILE" --log "$LOGFILE" || true
          for i in $(seq 1 60); do
            /sbin/ip a | grep -q tun0 && break
            sleep 1
          done
          /sbin/ip a | grep -q tun0 || { echo "❌ VPN failed to connect"; exit 1; }

      - name: 🌍 Start local test server
        run: |
          npm install -g http-server@14 || true
          nohup npx http-server -p 8080 -c-1 . > /tmp/http-server.log 2>&1 &
          for i in $(seq 1 10); do
            if curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null; then
              echo "✅ Server OK"; break
            fi
            sleep 1
          done

      - name: 🚀 Run orchestrator (Chrome + Puppeteer)
        env:
          TARGET_URL: "http://127.0.0.1:8080/otment-test.html"
          PUPPETEER_EXECUTABLE_PATH: /opt/hostedtoolcache/setup-chrome/chromium/*/x64/chrome
          CHROME_PATH: /opt/hostedtoolcache/setup-chrome/chromium/*/x64/chrome
          NODE_OPTIONS: "--no-deprecation"
        run: |
          echo "Launching Puppeteer with Chrome binary:"
          echo "$PUPPETEER_EXECUTABLE_PATH"
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" \
            timeout 90s node --trace-warnings scripts/orchestrator.js || (
              echo "❌ Chrome launch failed — capturing diagnostics"
              ps -ef | grep chrome || true
              cat /tmp/http-server.log || true
              exit 1
            )
        timeout-minutes: 30

      - name: 🧩 Verify artifacts
        if: always()
        run: |
          echo "Artifacts produced:"
          ls -la artifacts || true
          [ "$(ls -A artifacts/screenshots 2>/dev/null)" ] || { echo "❌ No screenshots!"; exit 1; }

      - name: 🧾 Collect diagnostics
        if: always()
        run: |
          google-chrome --version || chromium --version || true
          [ -f /tmp/openvpn.log ] && cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true

      - name: 🔌 Disconnect VPN
        if: always()
        run: sudo pkill -f openvpn || true

      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browser-artifacts
          path: artifacts/**
