name: Browser tests (non-headless)

on: [push, pull_request]

permissions:
  contents: read
  actions: write

jobs:
  browser:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üß± Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üß∞ Install APT dependencies and enable universe
        run: |
          sudo apt-get update -y
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update -y
          apt-cache policy libasound2 libasound2t64 liboss4-salsa-asound2 || true
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libgtk-3-0 \
            libxss1 \
            libasound2t64 \
            fonts-liberation \
            libgbm-dev \
            libnss3-dev \
            libu2f-udev \
            xdg-utils \
            openvpn \
            iproute2 \
            iputils-ping \
            curl \
            gconf-service \
            libdrm2

      - name: üåê Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest
          install-dependencies: true

      - name: üì¶ Install npm dependencies
        run: npm ci

      - name: üß© Ensure chromedriver available
        run: |
          ls -la node_modules/.bin || true
          node -e "console.log(require('chromedriver').path || 'chromedriver not found')"

      - name: üóÇÔ∏è Create artifact folders
        run: |
          mkdir -p artifacts/screenshots
          mkdir -p artifacts/diagnostics
          mkdir -p artifacts/videos || true

      - name: üßæ Show package.json and scripts
        run: |
          echo "package.json content:"
          cat package.json
          echo "---"
          echo "npm scripts:"
          npm run

      - name: üß≠ Diagnostics - list key repo and extension files
        run: |
          echo "Working dir: $(pwd)"
          echo "Manifest exists?"; test -f manifest.json && echo "yes" || echo "no"
          echo "List of root files:"; ls -la
          echo "Show first 100 lines of manifest.json:"; sed -n '1,100p' manifest.json || true
          echo "Extension-related JS files:"; ls -la | grep -E "background.js|manifest.json|options.html|options.js|solver.detector.content.js|crypto-utils.js|crypto-worker.js" || true

      - name: üß± Ensure test page exists
        run: |
          if [ ! -f "otment-test.html" ]; then
            echo "‚ö†Ô∏è  otment-test.html missing ‚Äî creating minimal fallback page..."
            cat <<'EOF' > otment-test.html
          <!DOCTYPE html>
          <html lang="en">
          <head><meta charset="UTF-8"><title>OTMenT Test Page</title></head>
          <body>
            <div id="otment-status">Initializing...</div>
            <iframe id="test-frame" srcdoc="<input id='target-input' placeholder='Type here...' />" width="600" height="400"></iframe>
          </body>
          </html>
          EOF
          fi
          echo "‚úÖ Verified otment-test.html present."

      - name: üîÅ Rotate and start OpenVPN connection
        env:
          CI: true
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          VPN_DIR="VPN"
          AUTH_FILE="$VPN_DIR/auth.txt"
          STATE_FILE="$VPN_DIR/rotation_state.txt"
          PIDFILE="/tmp/openvpn.pid"
          LOGFILE="/tmp/openvpn.log"

          echo "üîç Scanning for available .ovpn configs..."
          mapfile -t OVPN_LIST < <(find "$VPN_DIR" -maxdepth 1 -type f -name "*.ovpn" | sort)
          if [ "${#OVPN_LIST[@]}" -eq 0 ]; then
            echo "‚ùå ERROR: No .ovpn files found in $VPN_DIR"
            ls -la "$VPN_DIR" || true
            exit 1
          fi
          echo "üì¶ Found ${#OVPN_LIST[@]} configs."

          if [ ! -f "$AUTH_FILE" ]; then
            echo "‚ùå ERROR: Missing $AUTH_FILE"
            exit 1
          fi

          if [ -f "$STATE_FILE" ]; then
            LAST_USED=$(cat "$STATE_FILE" || true)
            echo "üïπ Last used config: $LAST_USED"
            NEXT=""
            for ((i = 0; i < ${#OVPN_LIST[@]}; i++)); do
              if [[ "${OVPN_LIST[$i]}" == "$LAST_USED" ]]; then
                NEXT_INDEX=$(( (i + 1) % ${#OVPN_LIST[@]} ))
                NEXT="${OVPN_LIST[$NEXT_INDEX]}"
                break
              fi
            done
            if [ -z "$NEXT" ]; then
              NEXT="${OVPN_LIST[0]}"
            fi
          else
            echo "üÜï No rotation history found. Starting fresh."
            NEXT="${OVPN_LIST[0]}"
          fi

          echo "üß≠ Selected VPN config: $NEXT"
          echo "$NEXT" > "$STATE_FILE"

          echo "üåê Capturing baseline external IP..."
          BASE_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "Base IP: $BASE_IP"

          echo "üöÄ Starting OpenVPN..."
          if grep -q "auth-user-pass" "$NEXT"; then
            sudo nohup openvpn --config "$NEXT" --auth-user-pass "$AUTH_FILE" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          else
            sudo nohup openvpn --config "$NEXT" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          fi

          echo "‚è≥ Waiting up to 60 seconds for VPN interface (tun0)..."
          for i in $(seq 1 60); do
            if /sbin/ip a | grep -q tun0; then
              echo "‚úÖ tun0 detected after $i seconds"
              break
            fi
            sleep 1
          done

          if ! /sbin/ip a | grep -q tun0; then
            echo "‚ùå ERROR: VPN interface tun0 not detected after 60 seconds"
            tail -n 100 "$LOGFILE" || true
            exit 1
          fi

          echo "üì° Checking external IP after VPN activation..."
          VPN_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "VPN external IP: $VPN_IP"

          if [ "$VPN_IP" = "$BASE_IP" ] || [ "$VPN_IP" = "unknown" ]; then
            echo "‚ùå ERROR: External IP did not change ‚Äî VPN may have failed"
            tail -n 200 "$LOGFILE" || true
            exit 1
          fi

          echo "‚úÖ VPN successfully activated"
          echo "Routing table:"
          /sbin/ip route | sed -n '1,30p'

      - name: üåç Start local static server for test page
        run: |
          npm install -g http-server@14 || true
          nohup npx http-server -p 8080 -c-1 . > /tmp/http-server.log 2>&1 &
          echo "Started http-server; waiting..."
          for i in $(seq 1 10); do
            if curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1; then
              echo "‚úÖ Test page reachable."
              break
            fi
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1; then
            echo "‚ùå Local test page not reachable."
            cat /tmp/http-server.log || true
            exit 1
          fi

      - name: ‚öôÔ∏è Export test environment variables
        run: |
          echo "TEST_PAGE_URL=http://127.0.0.1:8080/otment-test.html" >> $GITHUB_ENV
          CHROME_PATH=$(which google-chrome || which chromium || echo "/usr/bin/google-chrome")
          echo "CHROME_PATH=$CHROME_PATH" >> $GITHUB_ENV
          CHROME_ARGS="--disable-extensions-except=${PWD} --load-extension=${PWD} --no-sandbox --disable-dev-shm-usage --enable-unsafe-swiftshader --window-size=1920,1080"
          echo "CHROME_ARGS=$CHROME_ARGS" >> $GITHUB_ENV
          echo "‚úÖ Exported environment variables."

      - name: üß† Run headed tests under Xvfb
        env:
          CI: true
          TEST_PAGE_URL: ${{ env.TEST_PAGE_URL }}
          CHROME_PATH: ${{ env.CHROME_PATH }}
          CHROME_ARGS: ${{ env.CHROME_ARGS }}
        run: |
          echo "Launching Puppeteer / Orchestrator..."
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" timeout 120s npm run test:headed
        timeout-minutes: 30
        continue-on-error: false

      - name: üß© Verify artifacts produced
        if: always()
        run: |
          echo "Checking artifacts..."
          ls -la artifacts || true
          if [ ! -s artifacts/extension-browser-logs.json ]; then
            echo "‚ö†Ô∏è  Missing extension-browser-logs.json"
            mkdir -p artifacts/diagnostics
            [ -f /tmp/openvpn.log ] && cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true
            exit 1
          fi

      - name: üßæ Collect diagnostics and logs
        if: always()
        run: |
          google-chrome --version || chromium --version || true
          echo "Artifacts:"; ls -la artifacts || true
          echo "Diagnostics:"; ls -la artifacts/diagnostics || true
          echo "Screenshots:"; ls -la artifacts/screenshots || true
          [ -f /tmp/openvpn.log ] && cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true
          echo "VPN Log tail:"
          tail -n 200 /tmp/openvpn.log || true

      - name: üîå Disconnect OpenVPN (cleanup)
        if: always()
        run: |
          echo "Disconnecting VPN..."
          PIDFILE="/tmp/openvpn.pid"
          if [ -f "$PIDFILE" ]; then
            sudo kill "$(cat "$PIDFILE")" || true
            rm -f "$PIDFILE" || true
          fi
          sudo pkill -f openvpn || true
          echo "‚úÖ VPN disconnected."

      - name: üì§ Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browser-artifacts
          path: |
            artifacts/extension-browser-logs.json
            artifacts/diagnostics/**
            artifacts/screenshots/**
            artifacts/videos/**
