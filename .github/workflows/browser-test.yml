name: Browser tests (non-headless)

on: [push, pull_request]

permissions:
  contents: read
  actions: write

jobs:
  browser:
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout
        uses: actions/checkout@v4

      - name: 🧱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🧰 Install APT deps and enable universe
        run: |
          sudo apt-get update -y
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            xvfb \
            libgtk-3-0 \
            libxss1 \
            libasound2t64 \
            fonts-liberation \
            libgbm-dev \
            libnss3-dev \
            libu2f-udev \
            xdg-utils \
            openvpn \
            iproute2 \
            iputils-ping \
            curl

      - name: 🌐 Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest
          install-dependencies: true

      - name: 📦 Install npm packages
        run: npm ci

      - name: 🧩 Ensure Puppeteer installed
        run: |
          npm install puppeteer@23 --save-dev

      - name: 🗂️ Create artifact folders
        run: |
          mkdir -p artifacts/screenshots
          mkdir -p artifacts/diagnostics
          mkdir -p artifacts/videos || true

      - name: 🧾 Ensure test page exists
        run: |
          if [ ! -f "otment-test.html" ]; then
            echo "⚠️  otment-test.html missing — creating fallback test page..."
            cat <<'EOF' > otment-test.html
          <!DOCTYPE html>
          <html lang="en">
          <head><meta charset="UTF-8"><title>OTMenT Test Page</title></head>
          <body>
            <h3>OTMenT Test Environment</h3>
            <iframe id="test-frame" srcdoc="<input id='target-input' placeholder='Type here...' />" width="600" height="400"></iframe>
          </body>
          </html>
          EOF
          fi
          echo "✅ Verified otment-test.html present."

      - name: 🔁 Rotate and connect VPN
        env:
          CI: true
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          VPN_DIR="VPN"
          AUTH_FILE="$VPN_DIR/auth.txt"
          STATE_FILE="$VPN_DIR/rotation_state.txt"
          PIDFILE="/tmp/openvpn.pid"
          LOGFILE="/tmp/openvpn.log"

          echo "🔍 Scanning for available .ovpn configs..."
          mapfile -t OVPN_LIST < <(find "$VPN_DIR" -maxdepth 1 -type f -name "*.ovpn" | sort)
          if [ "${#OVPN_LIST[@]}" -eq 0 ]; then
            echo "❌ No .ovpn files found in $VPN_DIR"
            exit 1
          fi

          if [ -f "$STATE_FILE" ]; then
            LAST_USED=$(cat "$STATE_FILE" || true)
            echo "🕹 Last used config: $LAST_USED"
            NEXT=""
            for ((i = 0; i < ${#OVPN_LIST[@]}; i++)); do
              if [[ "${OVPN_LIST[$i]}" == "$LAST_USED" ]]; then
                NEXT_INDEX=$(( (i + 1) % ${#OVPN_LIST[@]} ))
                NEXT="${OVPN_LIST[$NEXT_INDEX]}"
                break
              fi
            done
            if [ -z "$NEXT" ]; then
              NEXT="${OVPN_LIST[0]}"
            fi
          else
            echo "🆕 No previous rotation — starting fresh."
            NEXT="${OVPN_LIST[0]}"
          fi

          echo "🧭 Selected VPN config: $NEXT"
          echo "$NEXT" > "$STATE_FILE"

          echo "🌐 Checking baseline external IP..."
          BASE_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "Base IP: $BASE_IP"

          echo "🚀 Starting OpenVPN..."
          if grep -q "auth-user-pass" "$NEXT"; then
            sudo nohup openvpn --config "$NEXT" --auth-user-pass "$AUTH_FILE" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          else
            sudo nohup openvpn --config "$NEXT" --daemon --writepid "$PIDFILE" --log "$LOGFILE"
          fi

          echo "⏳ Waiting for VPN interface (tun0)..."
          for i in $(seq 1 60); do
            if /sbin/ip a | grep -q tun0; then
              echo "✅ tun0 active after $i seconds"
              break
            fi
            sleep 1
          done

          if ! /sbin/ip a | grep -q tun0; then
            echo "❌ VPN interface not detected after 60s"
            tail -n 100 "$LOGFILE" || true
            exit 1
          fi

          echo "📡 Verifying new external IP..."
          VPN_IP=$(curl -sS https://ifconfig.co || echo "unknown")
          echo "VPN external IP: $VPN_IP"

          if [ "$VPN_IP" = "$BASE_IP" ] || [ "$VPN_IP" = "unknown" ]; then
            echo "❌ VPN did not change external IP"
            tail -n 200 "$LOGFILE" || true
            exit 1
          fi

          echo "✅ VPN active and verified."

      - name: 🌍 Start local static server
        run: |
          npm install -g http-server@14 || true
          nohup npx http-server -p 8080 -c-1 . > /tmp/http-server.log 2>&1 &
          echo "Starting local server..."
          for i in $(seq 1 10); do
            if curl -sSf http://127.0.0.1:8080/otment-test.html >/dev/null 2>&1; then
              echo "✅ Local test page reachable."
              break
            fi
            sleep 1
          done

      - name: 🚀 Run orchestrator (Puppeteer + VPN)
        env:
          TARGET_URL: "http://127.0.0.1:8080/otment-test.html"
          PUPPETEER_EXECUTABLE_PATH: "/usr/bin/google-chrome"
        run: |
          echo "Starting Puppeteer orchestrator..."
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &

          echo "⏳ Waiting 3s for Xvfb to initialize..."
          sleep 3

          echo "💻 Running orchestrator.js under Xvfb"
          node --trace-warnings scripts/orchestrator.js || {
            echo "❌ Puppeteer launch failed — showing diagnostics:"
            ps aux | grep chrome || true
            cat /tmp/http-server.log || true
            exit 1
          }
        timeout-minutes: 30

      - name: 🧩 Verify artifacts
        if: always()
        run: |
          echo "Checking artifacts..."
          ls -la artifacts || true
          if [ ! "$(ls -A artifacts/screenshots 2>/dev/null)" ]; then
            echo "❌ No screenshots found!"
            exit 1
          fi
          echo "✅ Screenshot artifacts verified."

      - name: 🧾 Collect diagnostics
        if: always()
        run: |
          google-chrome --version || chromium --version || true
          echo "--- Screenshot files ---"
          ls -la artifacts/screenshots || true
          [ -f /tmp/openvpn.log ] && cp /tmp/openvpn.log artifacts/diagnostics/openvpn.log || true

      - name: 🔌 Disconnect VPN (cleanup)
        if: always()
        run: |
          sudo pkill -f openvpn || true
          echo "✅ VPN disconnected."

      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browser-artifacts
          path: |
            artifacts/diagnostics/**
            artifacts/screenshots/**
            artifacts/videos/**
